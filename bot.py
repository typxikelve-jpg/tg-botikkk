import logging
import asyncio
import json
import os
from datetime import datetime, timedelta
import pytz

from fastapi import FastAPI, Request  # ‚úÖ —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage


# -------------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
# -------------------------------
API_TOKEN = "8370797958:AAE5eXZOq66IhaK3D9Y5tU9ad-2AQQPuf3s"   # <-- —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
ADMINS = [7721203223, 7565250716, 8048631870]                 # <-- —Å–ø–∏—Å–æ–∫ –∞–π–¥–∏ –∞–¥–º–∏–Ω–æ–≤
app = FastAPI()
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = os.getenv("https://tg-botikkk.vercel.app/webhook")

PAYMENT_DETAILS = """
üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:
‚úÖ –°–±–µ—Ä–±–∞–Ω–∫: 
–ò–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤
‚ùó –ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –§–ò–û –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.
"""

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# -------------------------------
# –ö–∞—Ç–∞–ª–æ–≥ (JSON)
# -------------------------------
CATALOG_FILE = "catalog.json"
if not os.path.exists(CATALOG_FILE):
    with open(CATALOG_FILE, "w", encoding="utf-8") as f:
        json.dump([], f, ensure_ascii=False, indent=2)

def load_catalog():
    with open(CATALOG_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_catalog():
    with open(CATALOG_FILE, "w", encoding="utf-8") as f:
        json.dump(catalog, f, ensure_ascii=False, indent=2)

async def add_option_callback(callback: types.CallbackQuery, state: FSMContext):
    try:
        # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º cat_id –∏ idx
        cat_id, idx = map(int, callback.data.split("_")[2:])
    except ValueError:
        await callback.answer("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏!", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    options = data.get(f"category_{cat_id}_options", [])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã –Ω–µ –≤—ã–π—Ç–∏ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã –º–∞—Å—Å–∏–≤–∞
    if idx >= len(options):
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å!", show_alert=True)
        return

    # –ü—Ä–∏–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≤–∫—É—Å–∞
    new_option = f"–ù–æ–≤—ã–π –≤–∫—É—Å {len(options)+1}"
    options.append(new_option)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ
    await state.update_data({f"category_{cat_id}_options": options})

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    await callback.answer(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –≤–∫—É—Å: {new_option}")

def add_option_to_item(catalog, cat_id: int, new_option: str, option_value: int = 0):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –≤–∫—É—Å –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–æ–≤–∞—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    """
    if not (0 <= cat_id < len(catalog)):
        return "‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

    if not catalog[cat_id]["items"]:
        return "‚ùå –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤"

    # –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–æ–≤–∞—Ä
    item = catalog[cat_id]["items"][-1]

    if "options" not in item:
        item["options"] = []

    if new_option in item["options"]:
        return "‚ùå –¢–∞–∫–æ–π –≤–∫—É—Å —É–∂–µ –µ—Å—Ç—å"

    item["options"].append(new_option)
    if "options_stock" not in item:
        item["options_stock"] = {}
    item["options_stock"][new_option] = option_value
    save_catalog()
    return f"‚úÖ –í–∫—É—Å ¬´{new_option}¬ª –¥–æ–±–∞–≤–ª–µ–Ω"


catalog = load_catalog()

USERS_FILE = "users.json"
if not os.path.exists(USERS_FILE):
    with open(USERS_FILE, "w", encoding="utf-8") as f:
        json.dump({}, f, ensure_ascii=False, indent=2)

def load_users():
    with open(USERS_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_users():
    with open(USERS_FILE, "w", encoding="utf-8") as f:
        json.dump(users, f, ensure_ascii=False, indent=2)

users = load_users()

def get_status(user_id: int) -> str:
    return users.get(str(user_id), {}).get("status", "none")

def set_status(user_id: int, status: str, username: str = None):
    users[str(user_id)] = {
        "status": status,
        "username": username or users.get(str(user_id), {}).get("username", "")
    }
    save_users()

def add_stock_to_item(catalog, cat_id: int, idx: int, amount: int):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –æ—Å—Ç–∞—Ç–∫–∏ –∫ —Ç–æ–≤–∞—Ä—É.
    –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –±–µ–∑ –≤–∫—É—Å–æ–≤ ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –æ–±—â–∏–π stock.
    –ï—Å–ª–∏ —Å –≤–∫—É—Å–∞–º–∏ ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º options_stock (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ).
    """
    if not (0 <= cat_id < len(catalog)):
        return "‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    if not (0 <= idx < len(catalog[cat_id]["items"])):
        return "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"

    item = catalog[cat_id]["items"][idx]

    # –ï—Å–ª–∏ —É —Ç–æ–≤–∞—Ä–∞ –µ—Å—Ç—å options_stock ‚Äî —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –≤—Å–µ—Ö –≤–∫—É—Å–æ–≤
    if "options_stock" in item and item["options_stock"]:
        for opt in item["options_stock"]:
            item["options_stock"][opt] += amount
        save_catalog()
        return f"‚úÖ –û—Å—Ç–∞—Ç–∫–∏ –≤—Å–µ—Ö –≤–∫—É—Å–æ–≤ —É–≤–µ–ª–∏—á–µ–Ω—ã –Ω–∞ {amount}"
    else:
        # –î–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –≤–∫—É—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π stock
        if "stock" not in item:
            item["stock"] = 0
        item["stock"] += amount
        save_catalog()
        return f"‚úÖ –û—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞ —É–≤–µ–ª–∏—á–µ–Ω –Ω–∞ {amount}"

# -------------------------------
# –î–∞–Ω–Ω—ã–µ (–≤ –ø–∞–º—è—Ç–∏)
# -------------------------------
carts: dict[int, list] = {}
orders: dict[int, dict] = {}
booked_slots: set[str] = set()

# -------------------------------
# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
# -------------------------------
class EditCategory(StatesGroup):
    waiting_new_name = State()

class EditProduct(StatesGroup):
    waiting_price = State()
    waiting_name = State()
    waiting_new_category = State()
    waiting_options = State()
    waiting_remove_option = State()  # –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤–∫—É—Å–∞
    waiting_new_option = State()  # –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∫—É—Å

class OrderProcess(StatesGroup):
    choosing_type = State()
    choosing_date = State()
    choosing_time = State()
    entering_name = State()
    entering_payment = State()

# -------------------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# -------------------------------
def is_admin(user_id: int) -> bool:
    return user_id in ADMINS   # ‚úÖ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ


def get_cart(user_id: int):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π)"""
    return carts.setdefault(user_id, [])

def add_to_cart(user_id: int, item: dict):
    """
    –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É.
    item –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å:
        - name
        - price
        - cat_id
        - idx
        - option (–µ—Å–ª–∏ –µ—Å—Ç—å)
    """
    carts.setdefault(user_id, []).append(item)

def clear_cart(user_id: int):
    """–û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    carts[user_id] = []

def format_cart(user_id: int) -> str:
    cart = get_cart(user_id)
    if not cart:
        return "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞."
    text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
    total = 0
    for i, item in enumerate(cart, start=1):
        line = f"{i}. {item['name']} - {item['price']}‚ÇΩ"
        if "option" in item:
            line += f" ({item['option']})"
        text += line + "\n"
        total += item["price"]
    text += f"\nüí∞ –ò—Ç–æ–≥–æ: {total}‚ÇΩ"
    return text

MSK = pytz.timezone("Europe/Moscow")

def generate_time_slots() -> list[str]:
    slots = []
    start_time = datetime.strptime("12:00", "%H:%M")
    end_time = datetime.strptime("22:00", "%H:%M")
    while start_time <= end_time:
        slots.append(start_time.strftime("%H:%M"))
        start_time += timedelta(minutes=30)
    return slots

async def send_admin_catalog_menu(chat_id: int):
    kb = InlineKeyboardBuilder()
    if not catalog:
        kb.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="add_category")
        kb.button(text="‚¨ÖÔ∏è –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_root")
        kb.adjust(1)
        await bot.send_message(chat_id, "–ö–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–∫–∞ –Ω–µ—Ç. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é:", reply_markup=kb.as_markup())
        return

    for i, category in enumerate(catalog):
        kb.button(text=f"üì¶ {category['name']}", callback_data=f"admin_cat_{i}")
    kb.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="add_category")
    kb.button(text="‚¨ÖÔ∏è –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_root")
    kb.adjust(1)
    await bot.send_message(chat_id, "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=kb.as_markup())

async def send_admin_category_menu(chat_id: int, cat_id: int):
    if not (0 <= cat_id < len(catalog)):
        await bot.send_message(chat_id, "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    category = catalog[cat_id]
    kb = InlineKeyboardBuilder()
    if category["items"]:
        for idx, item in enumerate(category["items"]):
            kb.button(text=f"{item['name']} ‚Äî {item['price']}‚ÇΩ", callback_data=f"admin_item_{cat_id}_{idx}")
    else:
        kb.button(text="(—Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç)", callback_data="noop")
    kb.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data=f"admin_add_{cat_id}")
    kb.button(text="üóë –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data=f"del_cat_{cat_id}")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="admin_catalog")
    kb.adjust(1)
    await bot.send_message(chat_id, f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category['name']}", reply_markup=kb.as_markup())

async def send_item_card(chat_id: int, cat_id: int, idx: int):
    if not (0 <= cat_id < len(catalog)) or not (0 <= idx < len(catalog[cat_id]["items"])):
        await bot.send_message(chat_id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    item = catalog[cat_id]["items"][idx]
    options_line = ""
    if "options" in item and item["options"]:
        options_line = "\n‚Ä¢ –í–∫—É—Å—ã: " + ", ".join(item["options"])
    text = f"–¢–æ–≤–∞—Ä:\n‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {item['name']}\n‚Ä¢ –¶–µ–Ω–∞: {item['price']}‚ÇΩ{options_line}"
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"editname_{cat_id}_{idx}")],
        [InlineKeyboardButton(text="üíµ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É", callback_data=f"editprice_{cat_id}_{idx}")],
        [InlineKeyboardButton(text="‚ùå –£–±—Ä–∞—Ç—å –≤–∫—É—Å", callback_data=f"removeopt_{cat_id}_{idx}")],
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–∫—É—Å", callback_data=f"add_option_{cat_id}_{idx}")],
        [InlineKeyboardButton(text="üõ† –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Å—Ç–∞—Ç–∫–∏ –≤–∫—É—Å–æ–≤", callback_data=f"editflavor_{cat_id}_{idx}")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data=f"del_item_{cat_id}_{idx}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data=f"admin_cat_{cat_id}")]

    ])

    await bot.send_message(chat_id, text, reply_markup=kb)

# -------------------------------
# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–∫–ª–∏–µ–Ω—Ç)
# -------------------------------
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ö–∞—Ç–∞–ª–æ–≥")],
        [KeyboardButton(text="–ö–æ—Ä–∑–∏–Ω–∞"), KeyboardButton(text="–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É")],
        [KeyboardButton(text="–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")]
    ],
    resize_keyboard=True
)

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! üëã –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_kb)


def remove_out_of_stock_from_carts():
    """
    –£–±–∏—Ä–∞–µ—Ç –∏–∑ –∫–æ—Ä–∑–∏–Ω –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ç–æ–≤–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏.
    """
    for user_id, cart in carts.items():
        new_cart = []
        for item in cart:
            cat_id = item.get("cat_id")
            idx = item.get("idx")
            option = item.get("option")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∏ —Ç–æ–≤–∞—Ä
            if cat_id is None or idx is None or cat_id >= len(catalog) or idx >= len(catalog[cat_id]["items"]):
                continue

            catalog_item = catalog[cat_id]["items"][idx]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–ø—Ü–∏–∏ (–≤–∫—É—Å–∞) –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
            if option:
                available = catalog_item.get("options_stock", {}).get(option, 0)
                if available > 0:
                    new_cart.append(item)
            else:
                # –¢–æ–≤–∞—Ä –±–µ–∑ –æ–ø—Ü–∏–π ‚Äî —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –Ω–∞–ª–∏—á–∏–µ–º item["options_stock"]?
                # –ï—Å–ª–∏ –Ω–µ—Ç stock ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º
                new_cart.append(item)

        carts[user_id] = new_cart


# -------------------------------
# –ö–∞—Ç–∞–ª–æ–≥ (–∫–ª–∏–µ–Ω—Ç)
# -------------------------------
@dp.message(F.text == "–ö–∞—Ç–∞–ª–æ–≥")
async def show_catalog(message: types.Message):
    if not catalog:
        await message.answer("–ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    kb = InlineKeyboardBuilder()
    for i, category in enumerate(catalog):
        kb.button(text=category["name"], callback_data=f"cat_{i}")
    kb.adjust(1)
    await message.answer("üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb.as_markup())

@dp.callback_query(F.data.startswith("cat_"))
async def show_items(callback: types.CallbackQuery):
    cat_id = int(callback.data.split("_")[1])
    if not (0 <= cat_id < len(catalog)):
        await callback.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    category = catalog[cat_id]
    kb = InlineKeyboardBuilder()

    for idx, item in enumerate(category["items"]):
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏ –≤–∫—É—Å–æ–≤
        options_line = ""
        if "options_stock" in item and item["options_stock"]:
            options_line = " | ".join([f"{opt}: {qty}" for opt, qty in item["options_stock"].items()])
            options_line = f" ({options_line})"
        elif "options" in item and item["options"]:
            options_line = f" ({', '.join(item['options'])})"
        elif "stock" in item:  # –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –≤–∫—É—Å–æ–≤
            options_line = f" ({item['stock']} —à—Ç.)"

        kb.button(
            text=f"{item['name']} - {item['price']}‚ÇΩ{options_line}",
            callback_data=f"item_{cat_id}_{idx}"
        )

    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_catalog")
    kb.adjust(1)
    await callback.message.edit_text(f"üì¶ {category['name']}:", reply_markup=kb.as_markup())

@dp.callback_query(F.data.startswith("item_"))
async def choose_item(callback: types.CallbackQuery):
    _, cat_id, idx = callback.data.split("_")
    cat_id, idx = int(cat_id), int(idx)
    if not (0 <= cat_id < len(catalog)) or not (0 <= idx < len(catalog[cat_id]["items"])):
        await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    item = catalog[cat_id]["items"][idx]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏ –≤–∫—É—Å–æ–≤ / –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    options_line = ""
    if "options_stock" in item and item["options_stock"]:
        options_line = "\n‚Ä¢ –í–∫—É—Å—ã –∏ –æ—Å—Ç–∞—Ç–∫–∏:\n"
        options_line += "\n".join([f"{opt}: {qty} —à—Ç." for opt, qty in item["options_stock"].items()])
    elif "options" in item and item["options"]:
        options_line = "\n‚Ä¢ –í–∫—É—Å—ã: " + ", ".join(item["options"])
    elif "stock" in item:  # –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –≤–∫—É—Å–æ–≤
        options_line = f"\n‚Ä¢ –û—Å—Ç–∞—Ç–æ–∫: {item['stock']} —à—Ç."

    # –ï—Å–ª–∏ —É —Ç–æ–≤–∞—Ä–∞ –µ—Å—Ç—å –æ–ø—Ü–∏–∏ (–≤–∫—É—Å—ã) ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏–º –≤—ã–±—Ä–∞—Ç—å
    if "options" in item and item["options"]:
        kb = InlineKeyboardBuilder()
        for opt in item["options"]:
            kb.button(text=opt, callback_data=f"chooseopt_{cat_id}_{idx}_{opt}")
        kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"cat_{cat_id}")
        kb.adjust(1)
        await callback.message.edit_text(
            f"üç≠ {item['name']} ({item['price']}‚ÇΩ){options_line}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∫—É—Å:",
            reply_markup=kb.as_markup()
        )
    else:
        # ======= —Ç–æ–≤–∞—Ä—ã –±–µ–∑ –≤–∫—É—Å–æ–≤ =======
        stock = item.get("stock", 0)
        if stock <= 0:
            await callback.answer("‚ùå –¢–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è", show_alert=True)
            return

        # —Å—á–∏—Ç–∞–µ–º —Å–∫–æ–ª—å–∫–æ —É–∂–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ
        user_cart = get_cart(callback.from_user.id)
        in_cart_count = sum(1 for c in user_cart if c.get("name") == item["name"])

        if in_cart_count >= stock:
            await callback.answer(f"‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ {stock} —à—Ç.", show_alert=True)
            return

        add_to_cart(callback.from_user.id, {
            "name": item["name"],
            "price": item["price"],
            "cat_id": cat_id,
            "idx": idx
        })
        await callback.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É\n–û—Å—Ç–∞–ª–æ—Å—å: {stock - in_cart_count - 1}")
@dp.callback_query(F.data.startswith("chooseopt_"))
async def choose_option(callback: types.CallbackQuery):
    _, cat_id, idx, opt = callback.data.split("_", 3)
    cat_id, idx = int(cat_id), int(idx)
    item = catalog[cat_id]["items"][idx]

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = callback.from_user.id
    cart = get_cart(user_id)

    # –°—á–∏—Ç–∞–µ–º, —Å–∫–æ–ª—å–∫–æ —É–∂–µ –µ—Å—Ç—å —ç—Ç–æ–≥–æ –≤–∫—É—Å–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
    in_cart_count = sum(
        1 for c in cart
        if c.get("cat_id") == cat_id and c.get("idx") == idx and c.get("option") == opt
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫ —Å —É—á—ë—Ç–æ–º –∫–æ—Ä–∑–∏–Ω—ã
    available = item.get("options_stock", {}).get(opt, 0)
    if in_cart_count >= available:
        await callback.answer(f"–ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ '{opt}', –≤—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ {available}‚ùå", show_alert=True)
        return

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É
    add_to_cart(user_id, {
        "name": item["name"],
        "price": item["price"],
        "cat_id": cat_id,
        "idx": idx,
        "option": opt
    })

    await callback.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É ‚úÖ ({opt})")



@dp.callback_query(F.data == "back_catalog")
async def back_to_catalog(callback: types.CallbackQuery):
    kb = InlineKeyboardBuilder()
    for i, category in enumerate(catalog):
        kb.button(text=category["name"], callback_data=f"cat_{i}")
    kb.adjust(1)
    await callback.message.edit_text("üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb.as_markup())

@dp.message(F.text == "–ö–æ—Ä–∑–∏–Ω–∞")
async def show_cart(message: types.Message):
    await message.answer(format_cart(message.from_user.id))

@dp.message(F.text == "–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É")
async def clear_user_cart(message: types.Message):
    clear_cart(message.from_user.id)
    await message.answer("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞ üóëÔ∏è")

# -------------------------------
# –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ (—Ñ–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)
# -------------------------------

# -------------------------------
# –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
# -------------------------------
@dp.message(F.text == "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")
async def checkout(message: types.Message, state: FSMContext):
    cart = get_cart(message.from_user.id)
    if not cart:
        await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞ ‚ùå")
        return

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üèÉ –°–∞–º–æ–≤—ã–≤–æ–∑ —Å–µ–≥–æ–¥–Ω—è", callback_data="order_pickup")],
        [InlineKeyboardButton(text="üìÖ –ë—Ä–æ–Ω—å —Å–∞–º–æ–≤—ã–≤–æ–∑–∞", callback_data="order_reserve")],
        [InlineKeyboardButton(text="üöö –î–æ—Å—Ç–∞–≤–∫–∞", callback_data="order_delivery")]
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è:", reply_markup=kb)
    await state.set_state(OrderProcess.choosing_type)


@dp.callback_query(F.data.startswith("order_"))
async def choose_order_type(callback: types.CallbackQuery, state: FSMContext):
    order_type = callback.data.split("_")[1]  # pickup | reserve | delivery
    await state.update_data(order_type=order_type)

    if order_type == "pickup":
        today = datetime.now(MSK).date()
        slots = generate_time_slots()
        now = datetime.now(MSK)

        available = []
        for slot in slots:
            slot_time = datetime.strptime(slot, "%H:%M").time()
            if slot_time <= now.time():
                continue
            key = f"{today} {slot}"
            if key not in booked_slots:
                available.append(slot)

        if not available:
            await callback.answer("–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ ‚ùå", show_alert=True)
            return

        kb = InlineKeyboardBuilder()
        for slot in available:
            kb.button(text=slot, callback_data=f"pickup_time_{slot}")
        kb.adjust(4)

        await callback.message.edit_text("‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è —Å–∞–º–æ–≤—ã–≤–æ–∑–∞:", reply_markup=kb.as_markup())
        return

    # –ë—Ä–æ–Ω—å –∏ –¥–æ—Å—Ç–∞–≤–∫–∞ ‚Äî –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ 30 –¥–Ω–µ–π
    kb = InlineKeyboardBuilder()
    today = datetime.now(MSK).date()
    for i in range(0, 30):
        date = today + timedelta(days=i)
        kb.button(text=date.strftime("%d.%m"), callback_data=f"date_{date}")
    kb.adjust(4)
    await callback.message.edit_text("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=kb.as_markup())
    await state.set_state(OrderProcess.choosing_date)


@dp.callback_query(F.data.startswith("pickup_time_"))
async def pickup_time(callback: types.CallbackQuery, state: FSMContext):
    time_slot = callback.data.split("_")[2]
    today = datetime.now(MSK).date()
    key = f"{today} {time_slot}"

    if key in booked_slots:
        await callback.answer("–≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ ‚ùå", show_alert=True)
        return

    booked_slots.add(key)

    user_id = callback.from_user.id
    user_cart = get_cart(user_id)  # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É

    # –£–º–µ–Ω—å—à–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –≤–∫—É—Å–æ–≤
    for cart_item in user_cart:
        cat_id = cart_item.get("cat_id")
        idx = cart_item.get("idx")
        option = cart_item.get("option")

        if cat_id is not None and idx is not None and option:
            item = catalog[cat_id]["items"][idx]
            if "options_stock" in item and option in item["options_stock"]:
                item["options_stock"][option] -= 1
                if item["options_stock"][option] < 0:
                    item["options_stock"][option] = 0
                # –ï—Å–ª–∏ –Ω–µ—Ç –æ–ø—Ü–∏–π ‚Äî —É–º–µ–Ω—å—à–∞–µ–º stock
                elif "stock" in item:
                    item["stock"] -= 1
                    if item["stock"] < 0:
                        item["stock"] = 0


    remove_out_of_stock_from_carts()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–∞–ª–æ–≥ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è stock
    save_catalog()

    # –°–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑
    order_id = len(orders) + 1
    orders[order_id] = {
        "user_id": user_id,
        "username": f"@{callback.from_user.username}" if callback.from_user.username else callback.from_user.full_name,
        "items": user_cart,
        "type": "–°–∞–º–æ–≤—ã–≤–æ–∑ —Å–µ–≥–æ–¥–Ω—è",
        "date": str(today),
        "time": time_slot,
        "status": "new"
    }

    # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
    clear_cart(user_id)

    # –°–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
    await callback.message.edit_text(f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É. –í—Ä–µ–º—è: {time_slot}")

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    user = callback.from_user
    text = f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id}\n–¢–∏–ø: –°–∞–º–æ–≤—ã–≤–æ–∑ —Å–µ–≥–æ–¥–Ω—è\n–î–∞—Ç–∞: {today}\n–í—Ä–µ–º—è: {time_slot}\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username if user.username else user.full_name}\n\nüì¶ –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n"
    for i, item in enumerate(orders[order_id]["items"], start=1):
        line = f"{i}. {item['name']} - {item['price']}‚ÇΩ"
        if "option" in item:
            line += f" ({item['option']})"
        text += line + "\n"

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{order_id}"),
         InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{order_id}")]
    ])

    for admin_id in ADMINS:
        await bot.send_message(admin_id, text, reply_markup=kb)



@dp.callback_query(F.data.startswith("date_"))
async def choose_date(callback: types.CallbackQuery, state: FSMContext):
    date_str = callback.data.split("_")[1]
    await state.update_data(date=date_str)

    slots = generate_time_slots()
    now = datetime.now(MSK)
    selected_date = datetime.strptime(date_str, "%Y-%m-%d").date()

    available = []
    for slot in slots:
        if selected_date == now.date() and datetime.strptime(slot, "%H:%M").time() <= now.time():
            continue
        key = f"{date_str} {slot}"
        if key not in booked_slots:
            available.append(slot)

    if not available:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ ‚ùå", show_alert=True)
        return

    kb = InlineKeyboardBuilder()
    for slot in available:
        kb.button(text=slot, callback_data=f"time_{slot}")
    kb.adjust(4)

    await callback.message.edit_text("‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:", reply_markup=kb.as_markup())
    await state.set_state(OrderProcess.choosing_time)


@dp.callback_query(F.data.startswith("time_"))
async def choose_time(callback: types.CallbackQuery, state: FSMContext):
    time_slot = callback.data.split("_")[1]

    data = await state.get_data()
    date_str = data.get("date")
    order_type = data.get("order_type")

    if not date_str or not order_type:
        await callback.answer("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", show_alert=True)
        await state.clear()
        return

    key = f"{date_str} {time_slot}"
    if key in booked_slots:
        await callback.answer("–≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ ‚ùå", show_alert=True)
        return

    booked_slots.add(key)
    await state.update_data(time=time_slot)

    await callback.message.edit_text(PAYMENT_DETAILS)
    await asyncio.sleep(0.5)
    await bot.send_message(callback.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –§–ò–û –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –ø–ª–∞—Ç–µ–∂–∞:")
    await state.set_state(OrderProcess.entering_name)


# -------------------------------
# –ü–æ–ª—É—á–∞–µ–º –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
# -------------------------------
@dp.message(OrderProcess.entering_name)
async def get_name(message: types.Message, state: FSMContext):
    name = message.text.strip()
    if not name:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –§–ò–û.")
        return
    await state.update_data(name=name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´0¬ª –¥–ª—è –±—Ä–æ–Ω–∏):")
    await state.set_state(OrderProcess.entering_payment)


# -------------------------------
# –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å/–æ–ø–ª–∞—Ç—É –∏ —É–º–µ–Ω—å—à–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏
# -------------------------------
@dp.message(OrderProcess.entering_payment)
async def get_payment_info(message: types.Message, state: FSMContext):
    payment = message.text.strip()
    data = await state.get_data()
    user_id = message.from_user.id

    # –ë–µ—Ä—ë–º –∫–æ—Ä–∑–∏–Ω—É –¥–æ –æ—á–∏—Å—Ç–∫–∏
    user_cart = get_cart(user_id)

    # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –æ–ø—Ü–∏–π
    for cart_item in user_cart:
        cat_id = cart_item.get("cat_id")
        idx = cart_item.get("idx")
        option = cart_item.get("option")

        if cat_id is not None and idx is not None:
            item = catalog[cat_id]["items"][idx]

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º options_stock, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if "options" in item and "options_stock" not in item:
                item["options_stock"] = {opt: 10 for opt in item["options"]}  # —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ

            # –£–º–µ–Ω—å—à–∞–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∫—É—Å–∞
            if option and option in item.get("options_stock", {}):
                item["options_stock"][option] -= 1
                if item["options_stock"][option] < 0:
                    item["options_stock"][option] = 0


    remove_out_of_stock_from_carts()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–∞—Ç–∞–ª–æ–≥–µ
    save_catalog()

    # –°–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑ –ø–æ—Å–ª–µ —É–º–µ–Ω—å—à–µ–Ω–∏—è stock
    order_id = len(orders) + 1
    orders[order_id] = {
        "user_id": user_id,
        "username": f"@{message.from_user.username}" if message.from_user.username else message.from_user.full_name,
        "items": user_cart,
        "type": "–ë—Ä–æ–Ω—å —Å–∞–º–æ–≤—ã–≤–æ–∑–∞" if data.get("order_type") == "reserve" else "–î–æ—Å—Ç–∞–≤–∫–∞",
        "date": data.get("date"),
        "time": data.get("time"),
        "name": data.get("name"),
        "payment": payment,
        "status": "new"
    }

    # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ—Å–ª–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
    clear_cart(user_id)
    await state.clear()

    await message.answer("‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω—É.")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞ –∞–¥–º–∏–Ω–∞–º
    user = message.from_user
    text = (
        f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id}\n"
        f"–¢–∏–ø: {orders[order_id]['type']}\n"
        f"–î–∞—Ç–∞: {data.get('date','‚Äî')}\n"
        f"–í—Ä–µ–º—è: {data.get('time','‚Äî')}\n"
        f"–§–ò–û: {data.get('name','‚Äî')}\n"
        f"–ê–¥—Ä–µ—Å/–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {payment}\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username if user.username else user.full_name}\n\n"
        f"üì¶ –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n"
    )
    for i, item in enumerate(orders[order_id]["items"], start=1):
        line = f"{i}. {item['name']} - {item['price']}‚ÇΩ"
        if "option" in item:
            line += f" ({item['option']})"
        text += line + "\n"

    kb = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{order_id}"),
        InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{order_id}")
    ]])
    for admin_id in ADMINS:
        await bot.send_message(admin_id, text, reply_markup=kb)


# -------------------------------
# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏ (–∞–¥–º–∏–Ω)
# -------------------------------
# -------------------------------
# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏ (–∞–¥–º–∏–Ω)
# -------------------------------
@dp.callback_query(F.data == "admin_orders")
async def admin_orders(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    if not orders:
        await callback.message.edit_text("üì¶ –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
        return

    kb = InlineKeyboardBuilder()
    for order_id, order in orders.items():
        kb.button(
            text=f"–ó–∞–∫–∞–∑ #{order_id} ‚Äî {order['status']}",
            callback_data=f"view_order_{order_id}"
        )

    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_root")
    kb.adjust(1)
    await callback.message.edit_text("üì¶ –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤:", reply_markup=kb.as_markup())

# -------------------------------
# –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
# -------------------------------
@dp.callback_query(F.data.startswith("view_order_"))
async def view_order(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    order_id = int(callback.data.split("_")[2])
    order = orders.get(order_id)
    if not order:
        await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    text = (
        f"üì¶ –ó–∞–∫–∞–∑ #{order_id}\n"
        f"üë§ –ö–ª–∏–µ–Ω—Ç: {order['username']}\n"
        f"üÜî ID: {order['user_id']}\n"
        f"–¢–∏–ø: {order['type']}\n"
        f"–î–∞—Ç–∞: {order.get('date', '‚Äî')}\n"
        f"–í—Ä–µ–º—è: {order.get('time', '‚Äî')}\n"
        f"–°—Ç–∞—Ç—É—Å: {order['status']}\n\n"
        f"üì¶ –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n"
    )

    for i, item in enumerate(order["items"], start=1):
        line = f"{i}. {item['name']} - {item['price']}‚ÇΩ"
        if "option" in item:
            line += f" ({item['option']})"
        text += line + "\n"

    kb = InlineKeyboardBuilder()
    kb.button(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{order_id}")
    kb.button(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{order_id}")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑–∞–º", callback_data="admin_orders")
    kb.adjust(2)  # –¥–≤–µ –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥—É
    await callback.message.edit_text(text, reply_markup=kb.as_markup())

# -------------------------------
# –ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑
# -------------------------------
@dp.callback_query(F.data.startswith("accept_"))
async def accept_order(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    order_id = int(callback.data.split("_")[1])
    order = orders.get(order_id)
    if not order or order["status"] != "new":
        await callback.answer("–ó–∞–∫–∞–∑ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω ‚ùå", show_alert=True)
        return

    order["status"] = "accepted"
    await callback.message.edit_text(f"–ó–∞–∫–∞–∑ #{order_id} –ø—Ä–∏–Ω—è—Ç ‚úÖ")
    await bot.send_message(order["user_id"], f"–í–∞—à –∑–∞–∫–∞–∑ #{order_id} –ø—Ä–∏–Ω—è—Ç ‚úÖ")

# -------------------------------
# –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–∫–∞–∑
# -------------------------------
@dp.callback_query(F.data.startswith("reject_"))
async def reject_order(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    order_id = int(callback.data.split("_")[1])
    order = orders.get(order_id)
    if not order or order["status"] != "new":
        await callback.answer("–ó–∞–∫–∞–∑ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω ‚ùå", show_alert=True)
        return

    order["status"] = "rejected"
    # –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å–ª–æ—Ç, –µ—Å–ª–∏ –±—ã–ª
    key = f"{order.get('date','')} {order.get('time','')}".strip()
    booked_slots.discard(key)
    await callback.message.edit_text(f"–ó–∞–∫–∞–∑ #{order_id} –æ—Ç–∫–ª–æ–Ω—ë–Ω ‚ùå")
    await bot.send_message(order["user_id"], f"–í–∞—à –∑–∞–∫–∞–∑ #{order_id} –æ—Ç–∫–ª–æ–Ω—ë–Ω ‚ùå")


@dp.callback_query(F.data.startswith("accept_"))
async def accept_order(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    order_id = int(callback.data.split("_")[1])
    order = orders.get(order_id)
    if not order or order["status"] != "new":
        await callback.answer("–ó–∞–∫–∞–∑ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω ‚ùå", show_alert=True)
        return
    order["status"] = "accepted"
    await callback.message.edit_text(f"–ó–∞–∫–∞–∑ #{order_id} –ø—Ä–∏–Ω—è—Ç ‚úÖ")
    await bot.send_message(order["user_id"], f"–í–∞—à –∑–∞–∫–∞–∑ #{order_id} –ø—Ä–∏–Ω—è—Ç ‚úÖ")

@dp.callback_query(F.data.startswith("reject_"))
async def reject_order(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    order_id = int(callback.data.split("_")[1])
    order = orders.get(order_id)
    if not order or order["status"] != "new":
        await callback.answer("–ó–∞–∫–∞–∑ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω ‚ùå", show_alert=True)
        return
    order["status"] = "rejected"
    # –æ—Å–≤–æ–±–æ–¥–∏–º —Å–ª–æ—Ç, –µ—Å–ª–∏ –±—ã–ª
    key = f"{order.get('date','')} {order.get('time','')}".strip()
    booked_slots.discard(key)
    await callback.message.edit_text(f"–ó–∞–∫–∞–∑ #{order_id} –æ—Ç–∫–ª–æ–Ω—ë–Ω ‚ùå")
    await bot.send_message(order["user_id"], f"–í–∞—à –∑–∞–∫–∞–∑ #{order_id} –æ—Ç–∫–ª–æ–Ω—ë–Ω ‚ùå")

# -------------------------------
# –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (–≤—Ö–æ–¥)
# -------------------------------
@dp.message(Command("admin"))
async def admin_main(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–æ–º", callback_data="admin_catalog")],
        [InlineKeyboardButton(text="üõí –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏", callback_data="admin_orders")],
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="add_category")]
    ])
    await message.answer("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=kb)

# -------------------------------
# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–æ–º (–∞–¥–º–∏–Ω)
# -------------------------------
@dp.callback_query(F.data == "admin_catalog")
async def admin_catalog_menu(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    kb = InlineKeyboardBuilder()
    if not catalog:
        kb.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="add_category")
        kb.button(text="‚¨ÖÔ∏è –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_root")
        kb.adjust(1)
        await callback.message.edit_text("–ö–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–∫–∞ –Ω–µ—Ç. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é:", reply_markup=kb.as_markup())
        return

    for i, category in enumerate(catalog):
        kb.button(text=f"üì¶ {category['name']}", callback_data=f"admin_cat_{i}")
    kb.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="add_category")
    kb.button(text="‚¨ÖÔ∏è –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_root")
    kb.adjust(1)
    await callback.message.edit_text("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=kb.as_markup())

@dp.callback_query(F.data == "admin_root")
async def admin_root(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–æ–º", callback_data="admin_catalog")],
        [InlineKeyboardButton(text="üõí –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏", callback_data="admin_orders")],
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="add_category")]
    ])
    await callback.message.edit_text("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=kb)

# ---- –ö–∞—Ç–µ–≥–æ—Ä–∏—è
@dp.callback_query(F.data == "add_category")
async def add_category(callback: types.CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    await state.set_state(EditProduct.waiting_new_category)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")

@dp.message(EditProduct.waiting_new_category)
async def save_new_category(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    title = message.text.strip()
    if not title:
        await message.answer("‚ùå –ü—É—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    catalog.append({"name": title, "items": []})
    save_catalog()
    await state.clear()
    await message.answer(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è ¬´{title}¬ª –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
    await send_admin_catalog_menu(message.chat.id)

@dp.callback_query(F.data.startswith("admin_cat_"))
async def admin_category(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    cat_id = int(callback.data.split("_")[2])
    if not (0 <= cat_id < len(catalog)):
        await callback.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    category = catalog[cat_id]
    kb = InlineKeyboardBuilder()
    if category["items"]:
        for idx, item in enumerate(category["items"]):
            kb.button(text=f"{item['name']} ‚Äî {item['price']}‚ÇΩ", callback_data=f"admin_item_{cat_id}_{idx}")
    else:
        kb.button(text="(—Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç)", callback_data="noop")
    kb.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data=f"admin_add_{cat_id}")
    kb.button(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data=f"editcat_{cat_id}")
    kb.button(text="üóë –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data=f"del_cat_{cat_id}")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="admin_catalog")
    kb.adjust(1)
    await callback.message.edit_text(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category['name']}", reply_markup=kb.as_markup())

@dp.callback_query(F.data.startswith("del_cat_"))
async def delete_category(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    cat_id = int(callback.data.split("_")[2])
    if 0 <= cat_id < len(catalog):
        name = catalog[cat_id]["name"]
        del catalog[cat_id]
        save_catalog()
        await callback.message.edit_text(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è ¬´{name}¬ª —É–¥–∞–ª–µ–Ω–∞.")
        await send_admin_catalog_menu(callback.message.chat.id)
    else:
        await callback.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)

# ---- –¢–æ–≤–∞—Ä: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
@dp.callback_query(F.data.startswith("admin_add_"))
async def admin_add_item(callback: types.CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    cat_id = int(callback.data.split("_")[2])
    if cat_id < 0 or cat_id >= len(catalog):
        await callback.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    await state.update_data(mode="add_item", cat_id=cat_id)
    await state.set_state(EditProduct.waiting_name)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")

@dp.message(EditProduct.waiting_name)
async def handle_item_name(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    data = await state.get_data()
    mode = data.get("mode")
    if mode not in ("add_item", "edit_name"):
        await message.answer("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —à–∞–≥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ /admin")
        await state.clear()
        return

    name = message.text.strip()
    if not name:
        await message.answer("‚ùå –ü—É—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    if mode == "add_item":
        await state.update_data(temp_name=name)
        await state.set_state(EditProduct.waiting_price)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É (—á–∏—Å–ª–æ–º):")
    else:
        cat_id = int(data["cat_id"]); idx = int(data["idx"])
        catalog[cat_id]["items"][idx]["name"] = name
        save_catalog()
        await state.clear()
        await message.answer("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
        await send_item_card(message.chat.id, cat_id, idx)

@dp.message(EditProduct.waiting_price)
async def handle_item_price(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    data = await state.get_data()
    mode = data.get("mode")
    if mode not in ("add_item", "edit_price"):
        await message.answer("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —à–∞–≥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ /admin")
        await state.clear()
        return

    try:
        price = int(message.text.strip())
        if price < 0:
            raise ValueError
    except Exception:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 350.")
        return

    if mode == "add_item":
        await state.update_data(temp_price=price)
        await state.set_state(EditProduct.waiting_options)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤–∫—É—Å–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–Ω–µ—Ç¬ª):")
    else:
        cat_id = int(data["cat_id"]); idx = int(data["idx"])
        catalog[cat_id]["items"][idx]["price"] = price
        save_catalog()
        await state.clear()
        await message.answer("‚úÖ –¶–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
        await send_item_card(message.chat.id, cat_id, idx)

@dp.message(EditProduct.waiting_options)
async def handle_item_options(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    data = await state.get_data()
    mode = data.get("mode")

    # –†–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
    if mode == "add_item":
        cat_id = data["cat_id"]
        name = data["temp_name"]
        price = data["temp_price"]

        item = {"name": name, "price": price}
        options_text = message.text.strip()

        if options_text.lower() != "–Ω–µ—Ç":
            options = [opt.strip() for opt in options_text.split(",") if opt.strip()]
            if options:
                item["options"] = options
                # –°—Ä–∞–∑—É —Å–æ–∑–¥–∞—ë–º stock —Å –Ω—É–ª—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∫—É—Å–∞
                item["options_stock"] = {opt: 0 for opt in options}

        catalog[cat_id]["items"].append(item)
        save_catalog()
        await state.clear()
        await message.answer(f"‚úÖ –¢–æ–≤–∞—Ä ¬´{name}¬ª –¥–æ–±–∞–≤–ª–µ–Ω –∑–∞ {price}‚ÇΩ.")
        await send_admin_category_menu(message.chat.id, cat_id)
        return

    # –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–∞ –≤–∫—É—Å–æ–≤
    if mode == "edit_flavor":
        cat_id = int(data["cat_id"])
        idx = int(data["idx"])
        item = catalog[cat_id]["items"][idx]
        options_text = message.text.strip()

        try:
            new_stock = {}
            for part in options_text.split(","):
                opt, qty = part.split("=")
                opt = opt.strip()
                qty = int(qty.strip())
                if opt not in item.get("options", []):
                    await message.answer(f"‚ùå –í–∫—É—Å–∞ {opt} –Ω–µ—Ç –≤ —Ç–æ–≤–∞—Ä–µ")
                    return
                new_stock[opt] = qty
            item["options_stock"] = new_stock
            save_catalog()
            await message.answer("‚úÖ –û—Å—Ç–∞—Ç–∫–∏ –≤–∫—É—Å–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
            await send_item_card(message.chat.id, cat_id, idx)
            await state.clear()
        except Exception:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –í–∫—É—Å=–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é")
            return

    # –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ (–Ω–∞–∑–≤–∞–Ω–∏–µ/–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∫—É—Å–æ–≤)
    if mode == "edit_options":
        cat_id = int(data["cat_id"])
        idx = int(data["idx"])
        options_text = message.text.strip()

        item = catalog[cat_id]["items"][idx]

        if options_text.lower() == "–Ω–µ—Ç":
            # —É–¥–∞–ª—è–µ–º –≤—Å–µ –≤–∫—É—Å—ã
            item.pop("options", None)
            item.pop("options_stock", None)
        else:
            new_options = [opt.strip() for opt in options_text.split(",") if opt.strip()]

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –≤–∫—É—Å—ã –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º
            existing_options = set(item.get("options", []))
            for opt in new_options:
                if opt not in existing_options:
                    item.setdefault("options", []).append(opt)
                    item.setdefault("options_stock", {})[opt] = 0  # —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ

        save_catalog()
        await state.clear()
        await message.answer("‚úÖ –í–∫—É—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
        await send_item_card(message.chat.id, cat_id, idx)


# ---- –¢–æ–≤–∞—Ä: –∫–∞—Ä—Ç–æ—á–∫–∞ + –¥–µ–π—Å—Ç–≤–∏—è
@dp.callback_query(F.data.startswith("admin_item_"))
async def admin_item(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    _, _, cat_id, idx = callback.data.split("_")
    await send_item_card(callback.message.chat.id, int(cat_id), int(idx))

@dp.callback_query(F.data.startswith("editname_"))
async def edit_name(callback: types.CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    _, cat_id, idx = callback.data.split("_")
    await state.update_data(mode="edit_name", cat_id=int(cat_id), idx=int(idx))
    await state.set_state(EditProduct.waiting_name)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")

@dp.callback_query(F.data.startswith("editprice_"))
async def edit_price(callback: types.CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    _, cat_id, idx = callback.data.split("_")
    await state.update_data(mode="edit_price", cat_id=int(cat_id), idx=int(idx))
    await state.set_state(EditProduct.waiting_price)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ–º):")


@dp.callback_query(F.data.startswith("del_item_"))
async def delete_item(callback: types.CallbackQuery):
    await callback.answer()  # —É–±–∏—Ä–∞–µ–º "–∫—Ä—É—Ç–∏–ª–∫—É"
    logging.info("–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: %s", callback.data)

    parts = callback.data.split("_")  # ['del','item','0','1']
    cat_id = int(parts[2])
    idx = int(parts[3])

    name = catalog[cat_id]["items"][idx]["name"]
    del catalog[cat_id]["items"][idx]
    save_catalog()

    try:
        await callback.message.delete()
    except Exception as e:
        logging.exception("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: %s", e)

    await send_admin_category_menu(callback.message.chat.id, cat_id)


# –®–∞–≥ 1: –í—ã–±–æ—Ä –≤–∫—É—Å–∞
@dp.callback_query(F.data.startswith("editflavor_"))
async def edit_flavor_callback(callback: types.CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    try:
        _, cat_id, idx = callback.data.split("_")
        cat_id, idx = int(cat_id), int(idx)
    except Exception:
        await callback.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏ ‚ùå", show_alert=True)
        return

    item = catalog[cat_id]["items"][idx]
    await state.update_data(cat_id=cat_id, idx=idx)

    kb = InlineKeyboardBuilder()
    if "options" in item and item["options"]:
        for opt in item["options"]:
            kb.button(text=f"{opt}: {item.get('options_stock', {}).get(opt,0)} —à—Ç.", callback_data=f"editopt_{cat_id}_{idx}_{opt}")
        kb.adjust(1)
        await callback.message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –≤–∫—É—Å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ —Ç–æ–≤–∞—Ä–∞ '{item['name']}':", reply_markup=kb.as_markup())
    else:
        # –î–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –≤–∫—É—Å–æ–≤
        if "stock" not in item:
            item["stock"] = 0
        kb.button(text=f"–û—Å—Ç–∞—Ç–æ–∫: {item['stock']} —à—Ç.", callback_data=f"editstock_{cat_id}_{idx}")
        kb.adjust(1)
        await callback.message.answer(f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞ '{item['name']}':", reply_markup=kb.as_markup())
# –®–∞–≥ 2: –í–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –æ—Å—Ç–∞—Ç–∫–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–∫—É—Å–∞
@dp.callback_query(F.data.startswith("editopt_"))
async def edit_option_stock(callback: types.CallbackQuery, state: FSMContext):
    _, cat_id, idx, opt = callback.data.split("_", 3)
    cat_id, idx = int(cat_id), int(idx)

    item = catalog[cat_id]["items"][idx]
    await state.update_data(option=opt)
    await state.set_state(EditProduct.waiting_new_option)
    await callback.message.answer(f"–¢–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫ –≤–∫—É—Å–∞ '{opt}': {item['options_stock'].get(opt,0)}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:")
# –®–∞–≥ 3: –í–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –æ—Å—Ç–∞—Ç–∫–∞ (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π)
@dp.message(EditProduct.waiting_new_option)
async def process_single_stock(message: types.Message, state: FSMContext):
    data = await state.get_data()
    cat_id = data.get("cat_id")
    idx = data.get("idx")
    opt = data.get("option")  # –º–æ–∂–µ—Ç –±—ã—Ç—å None –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –≤–∫—É—Å–æ–≤

    item = catalog[cat_id]["items"][idx]

    try:
        amount = int(message.text.strip())
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")
        return

    if opt:  # –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–∫—É—Å–∞
        if "options_stock" not in item:
            item["options_stock"] = {opt: 0}
        item["options_stock"][opt] = max(amount, 0)
        await message.answer(f"‚úÖ –û—Å—Ç–∞—Ç–æ–∫ –≤–∫—É—Å–∞ '{opt}' –¥–ª—è —Ç–æ–≤–∞—Ä–∞ '{item['name']}' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {amount}")
    else:  # –¥–ª—è —Ç–æ–≤–∞—Ä–∞ –±–µ–∑ –≤–∫—É—Å–æ–≤
        if "stock" not in item:
            item["stock"] = 0
        item["stock"] = max(amount, 0)
        await message.answer(f"‚úÖ –û—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞ '{item['name']}' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {amount}")

    save_catalog()
    await state.clear()
@dp.callback_query(F.data.startswith("editstock_"))
async def edit_stock_callback(callback: types.CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    try:
        _, cat_id, idx = callback.data.split("_")
        cat_id, idx = int(cat_id), int(idx)
    except Exception:
        await callback.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏ ‚ùå", show_alert=True)
        return

    item = catalog[cat_id]["items"][idx]
    if "stock" not in item:
        item["stock"] = 0

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ FSM
    await state.update_data(cat_id=cat_id, idx=idx, option=None)
    await state.set_state(EditProduct.waiting_new_option)

    await callback.message.answer(
        f"–¢–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞ '{item['name']}': {item['stock']} —à—Ç.\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:"
    )

@dp.callback_query(F.data.startswith("editcat_"))
async def edit_category_name(callback: types.CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    cat_id = int(callback.data.split("_")[1])
    if not (0 <= cat_id < len(catalog)):
        await callback.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    await state.update_data(cat_id=cat_id)
    await state.set_state(EditCategory.waiting_new_name)
    await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´{catalog[cat_id]['name']}¬ª:")
@dp.message(EditCategory.waiting_new_name)
async def save_new_category_name(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    new_name = message.text.strip()
    if not new_name:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    data = await state.get_data()
    cat_id = data.get("cat_id")
    if cat_id is None or not (0 <= cat_id < len(catalog)):
        await message.answer("–û—à–∏–±–∫–∞. –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await state.clear()
        return

    catalog[cat_id]["name"] = new_name
    save_catalog()
    await state.clear()
    await message.answer(f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ ¬´{new_name}¬ª")

    # –æ–±–Ω–æ–≤–ª—è–µ–º –∞–¥–º–∏–Ω-–º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    await send_admin_category_menu(message.chat.id, cat_id)


@dp.callback_query(F.data.startswith("removeopt_"))
async def remove_option_callback(callback: types.CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    _, cat_id, idx = callback.data.split("_")
    cat_id, idx = int(cat_id), int(idx)

    await state.update_data(cat_id=cat_id, idx=idx)
    await state.set_state(EditProduct.waiting_remove_option)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∫—É—Å, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–±—Ä–∞—Ç—å:")
@dp.message(EditProduct.waiting_remove_option)
async def handle_remove_option(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    data = await state.get_data()
    cat_id = data["cat_id"]
    idx = data["idx"]
    item = catalog[cat_id]["items"][idx]

    opt_to_remove = message.text.strip()

    if "options" not in item or opt_to_remove not in item["options"]:
        await message.answer("‚ùå –í–∫—É—Å–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ")
        return

    # –£–¥–∞–ª—è–µ–º –≤–∫—É—Å –∏–∑ —Å–ª–æ–≤–∞—Ä—è
    item["options"].pop(opt_to_remove)

    save_catalog()
    await state.clear()
    await message.answer(f"‚úÖ –í–∫—É—Å ¬´{opt_to_remove}¬ª —É–¥–∞–ª—ë–Ω")
    await send_item_card(message.chat.id, cat_id, idx)


@dp.callback_query(F.data.startswith("add_option_"))
async def add_option_callback(callback: types.CallbackQuery, state: FSMContext):
    # –†–∞–∑–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–ª–±—ç–∫–∞
    parts = callback.data.split("_")
    cat_id = int(parts[2]) if len(parts) > 2 else None  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ int
    idx = int(parts[3]) if len(parts) > 3 else None      # –ü—Ä–∏–≤–æ–¥–∏–º –∫ int

    # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
    if cat_id is not None:
        await send_item_card(callback.message.chat.id, cat_id, idx)
    else:
        await callback.message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é.")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(cat_id=cat_id, idx=idx)
    await state.set_state(EditProduct.waiting_new_option)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–∫—É—Å–∞:")


@dp.message(EditProduct.waiting_new_option)
async def handle_add_option(message: types.Message, state: FSMContext):
    data = await state.get_data()
    cat_id = data.get("cat_id")
    idx = data.get("idx")  # –ø–æ–ª—É—á–∞–µ–º idx –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    new_opt = message.text.strip()

    if not new_opt:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∫—É—Å–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
    result = add_option_to_item(catalog, cat_id, new_opt, option_value=0)
    await message.answer(result)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞ —Å idx, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    await send_item_card(message.chat.id, cat_id, idx)

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    status = get_status(user_id)

    if status == "approved":
        await message.answer("–ü—Ä–∏–≤–µ—Ç! üëã –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_kb)
    elif status == "pending":
        await message.answer("‚è≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    elif status == "denied":
        await message.answer("‚ùå –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∫—Ä—É–∂–æ–∫.")
        set_status(user_id, "none")
    else:
        await message.answer("üë§ –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫—Ä—É–∂–æ–∫ üé• —Å –≤–∞—à–∏–º –ª–∏—Ü–æ–º.")

@dp.message(F.video_note)
async def handle_video_note(message: types.Message):
    user_id = message.from_user.id
    if get_status(user_id) == "approved":
        await message.answer("‚úÖ –í—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é.")
        return

    set_status(user_id, "pending", message.from_user.username or message.from_user.full_name)
    await message.answer("‚è≥ –í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω—É.")

    for admin_id in ADMINS:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"verify_allow_{user_id}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"verify_deny_{user_id}")]
        ])
        sent = await bot.send_video_note(admin_id, message.video_note.file_id, reply_markup=kb)
        await bot.send_message(admin_id, f"–ó–∞—è–≤–∫–∞ –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –æ—Ç @{message.from_user.username or message.from_user.full_name}\nID: {user_id}")

@dp.callback_query(F.data.startswith("verify_allow_"))
async def verify_allow(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        return await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)

    user_id = int(callback.data.split("_")[2])
    set_status(user_id, "approved")

    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ –∫—Ä—É–∂–∫–æ–º
    await callback.message.edit_reply_markup()

    # –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    await callback.message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.")

    # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await bot.send_message(user_id, "üéâ –í–∞—à–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.")

    await callback.answer()

@dp.callback_query(F.data.startswith("verify_deny_"))
async def verify_deny(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        return await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)

    user_id = int(callback.data.split("_")[2])
    set_status(user_id, "denied")

    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ –∫—Ä—É–∂–∫–æ–º
    await callback.message.edit_reply_markup()

    # –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    await callback.message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫–ª–æ–Ω—ë–Ω.")

    # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await bot.send_message(user_id, "‚ùå –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ.")

    await callback.answer()

@dp.message(Command("allow"))
async def allow_cmd(message: types.Message):
    if not is_admin(message.from_user.id):
        return await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ ‚ùå")

    parts = message.text.split()
    if len(parts) < 2:
        return await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /allow <user_id>")

    try:
        user_id = int(parts[1])
    except ValueError:
        return await message.answer("‚ùå user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")

    # –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å, –¥–∞–∂–µ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –±—ã–ª–æ
    set_status(user_id, "approved")

    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω")

    # –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        await bot.send_message(user_id, "üéâ –í–∞—à–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.")
    except Exception:
        await message.answer("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ (–æ–Ω –µ—â—ë –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª –±–æ—Ç–∞).")

    @dp.message(Command("deny"))
    async def deny_cmd(message: types.Message):
        if not is_admin(message.from_user.id):
            return await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ ‚ùå")

        parts = message.text.split()
        if len(parts) < 2:
            return await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /deny <user_id>")

        try:
            user_id = int(parts[1])
        except ValueError:
            return await message.answer("‚ùå user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")

        # –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å, –¥–∞–∂–µ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –±—ã–ª–æ
        set_status(user_id, "denied")

        await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫–ª–æ–Ω—ë–Ω")

        # –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            await bot.send_message(user_id, "‚ùå –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ.")
        except Exception:
            await message.answer("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ (–æ–Ω –µ—â—ë –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª –±–æ—Ç–∞).")

@dp.callback_query(F.data == "noop")
async def noop_handler(callback: types.CallbackQuery):
    await callback.answer("–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ", show_alert=True)

# -------------------------------
# –°–±—Ä–æ—Å —Å–ª–æ—Ç–æ–≤ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ
# -------------------------------
async def reset_booked_slots():
    while True:
        now = datetime.now(MSK)
        target = now.replace(hour=0, minute=1, second=0, microsecond=0)
        if now >= target:
            target += timedelta(days=1)
        wait_seconds = (target - now).total_seconds()
        await asyncio.sleep(wait_seconds)
        booked_slots.clear()   # üî¥ —Ç—É—Ç –æ—á–∏—â–∞—é—Ç—Å—è –≤—Å–µ —Å–ª–æ—Ç—ã
        logging.info("‚úÖ –°–ª–æ—Ç—ã —Å–±—Ä–æ—à–µ–Ω—ã (–Ω–æ–≤—ã–π –¥–µ–Ω—å)")

# -------------------------------
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
@app.on_event("startup")
async def startup_event():
    await bot.delete_webhook()
    await bot.set_webhook(WEBHOOK_URL)
    asyncio.create_task(reset_booked_slots())
    print(f"‚úÖ –í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

@app.on_event("shutdown")
async def shutdown_event():
    await bot.delete_webhook()
    print("‚ùå –í–µ–±—Ö—É–∫ —É–¥–∞–ª—ë–Ω")

@app.post(WEBHOOK_PATH)
async def telegram_webhook(req: Request):
    data = await req.json()
    update = types.Update(**data)
    await dp.process_update(update)
    return {"ok": True}


